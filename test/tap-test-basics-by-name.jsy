const testModule = require('..') // require('object-functional')

module.exports = exports = function(tap, options={}) ::

  tap.test @ 'By Name Action test', t => ::
    let obj, view1, view2

    class TestObject extends testModule.ObjectFunctional ::
      asAction = @[] 'someTestAction', 
        function (testKey, testValue) ::
          t.notStrictEqual(this, obj)
          t.notStrictEqual(this, view1)
          t.notStrictEqual(this, view2)

          this[testKey] = testValue
          return this

      plainMethod(testKey, testValue) ::
        t.throws @
          () => ::
            this[testKey] = {testKey, testValue}
          , 'Should not be able to mutate from outside an action method'

    obj = new TestObject()
    t.strictEqual(obj.key, undefined)

    obj.plainMethod('failKey', 'some-fail-value')

    view1 = obj.someTestAction('key', 'some-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')

    view1.plainMethod('failKey', 'some-fail-value')

    view2 = obj.someTestAction('key', 'some-other-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(view2.key, 'some-other-value')

    view2.plainMethod('failKey', 'some-fail-value')

    t.throws @
      () => :: obj.someAttr = 2142
      , 'Should not be able to mutate host attribute'

    t.throws @
      () => :: view2.someAttr = 1942
      , 'Should not be able to mutate view attribute'



  tap.test @ 'By Name Subscribe test', t => ::
    let obj, view1, view2

    class TestObject extends testModule.ObjectFunctional ::
      asAction = @[] 'someTestAction', 
        function (testKey, testValue) ::
          t.notStrictEqual(this, obj)
          t.notStrictEqual(this, view1)
          t.notStrictEqual(this, view2)

          this[testKey] = testValue
          return this

    obj = new TestObject()

    const _update_log_ =  []
    obj.subscribe @ view => ::
      _update_log_.push @ view ? view.key : null

    t.strictEqual(obj.key, undefined)
    t.deepEqual(_update_log_, [null])

    view1 = obj.someTestAction('key', 'some-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.deepEqual(_update_log_, [null, 'some-value'])

    view2 = obj.someTestAction('key', 'some-other-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(view2.key, 'some-other-value')
    t.deepEqual(_update_log_, [null, 'some-value', 'some-other-value'])


  tap.test @ 'BUGFIX: Actions should be durably replaced with dispatch action', t => ::
    class TestObject extends testModule.ObjectFunctional ::
      asAction = 'sync'
      sync() ::
        t.strictEqual @ false, Object.isFrozen(this)
        return this

      outside() ::
        t.strictEqual @ true, Object.isFrozen(this)


    const root = new TestObject()

    let src

    src = root.sync.toString()
    t.ok @ src.includes @ '_disp_action', src


    src = root.sync().sync.toString()
    t.ok @ src.includes @ '_disp_action', src

    root.outside()
    root.sync().outside()
    root.sync().sync().outside()


