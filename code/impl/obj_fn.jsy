import @{}
  o_assign, o_create, o_freeze, o_defineProperties, o_getPrototypeOf
from './statics.js'

import bindNotifyFunction from './notify.jsy'
import stateActionDispatch from './dispatch.jsy'


export function ObjectFunctional() ::
  return asFunctionalInstance(this)

const cache = new WeakMap()

export function asFunctionalInstance(host_instance, ...options) ::
  const host0 = o_getPrototypeOf(host_instance)
  let fo_create = cache.get(host0)
  if undefined === fo_create ::
    fo_create = asFunctionalHost @
      host_instance, host0, options

    cache.set(host0, fo_create)
  return fo_create()

export default asFunctionalObject
export function asFunctionalObject(...args) ::
  const fo_create = asFunctionalProto(...args)
  return fo_create()


export function asFunctionalProto(host_obj, ...options) ::
  let fo_create = cache.get(host_obj)
  if undefined === fo_create ::
    const actions = host_obj.asAction || host_obj.asActions
    if undefined !== actions && 'function' !== typeof actions ::
      options.push @: actions

    fo_create = asFunctionalHost @
      o_create(host_obj), host_obj, options

    cache.set(host_obj, fo_create)
  return fo_create

// ---

const hidden = new WeakMap()
function view_disp_action(view, actionName, actionArgs) ::
  const actx = hidden.get(view.subscribe)
  return actx.disp @ actx, actionName, actionArgs, view


export function asFunctionalHost(host, host0, options) ::
  if null == options :: options = {}
  else if Array.isArray(options) ::
    options = o_assign @ {}, ...options

  const __impl_proto__ = o_create(host0)
  const __rw_view_proto__ = o_create(host0)
  const __ro_view_proto__ = o_create(host0)

  const dispatchActionFor = bindDispatchAction(host0, options)
  if options.actions :: defineAction(options.actions)
  let asAction = @{} set: defineAction

  return fo_create

  function fo_create() ::
    // initialize options
    const rw_notify = bindNotifyFunction()
    const rw_props = @{}
      subscribe: @{} value: rw_notify.subscribe
      readwrite_view: @{} get() :: return rw_notify.current
      readonly_view: @{} get() :: return ro_notify.current

    const ro_notify = bindNotifyFunction()
    const ro_props = @{}
      subscribe: @{} value: ro_notify.subscribe
      readonly_view: @{} get() :: return ro_notify.current

    const props = @{} asAction
      subscribe: rw_props.subscribe
      readwrite_view: rw_props.readwrite_view
      readonly_view: rw_props.readonly_view

      __impl_proto__: @{} configurable: true, value:
        o_create @ __impl_proto__, rw_props
      __rw_view_proto__: @{} configurable: true, value:
        o_create @ __rw_view_proto__, rw_props
      __ro_view_proto__: @{} configurable: true, value:
        o_create @ __ro_view_proto__, ro_props

    if _noop_asAction !== asAction ::
      // clear asAction for next creation
      asAction = _noop_asAction

    const f_host = o_freeze @ o_create @ host, props
    const disp = dispatchActionFor(f_host)

    const actx = @{} disp, rw_notify, ro_notify
    hidden.set @ rw_notify.subscribe, actx

    // initialize the internal state with initial view
    disp(actx, null, [], null)

    return f_host


  function defineAction(actionList) ::
      if undefined === actionList || null === actionList :: return
      else if 'function' === typeof actionList ::
        actionList = @[] @[] actionList.name, actionList
      else if 'string' === typeof actionList ::
        actionList = @[] @[] actionList, host0[actionList]
      else if ! Array.isArray @ actionList ::
        actionList = Object.entries(actionList)
      else if 'string' === typeof actionList[0] ::
        actionList = @[] actionList


      const impl_props={}, ro_view_props={}, rw_view_props={}, host0_props={}
      for let [actionName, action] of actionList ::
        if ! actionName ::
          throw new TypeError @ `Action name not found`
        if 'function' !== typeof action ::
          throw new TypeError @ `Expected action "${actionName}" to be a function, but found "${typeof action}"`

        let fn
        if action.action :: // redefined...
          fn = action
          action = action.action
        else ::
          // trick to set the function displayName
          const ns = @{} [actionName](...actionArgs) ::
            return view_disp_action(this, actionName, actionArgs)
          fn = ns[actionName]
        fn.action = action

        impl_props[actionName] = @{} value: action
        ro_view_props[actionName] = ro_action
        rw_view_props[actionName] = @{} value: fn
        host0_props[actionName] = @{} value: fn, configurable: true

      o_defineProperties @ __impl_proto__, impl_props
      o_defineProperties @ __ro_view_proto__, ro_view_props
      o_defineProperties @ __rw_view_proto__, rw_view_props
      o_defineProperties @ host0, host0_props

const ro_action = @{} value() ::
  throw new Error @ 'View is read-only. Action method disallowed'

function bindDispatchAction(host0, options) ::
  let dispatchActionFor = options.dispatchAction
  if null != dispatchActionFor ::
    if 'function' !== typeof dispatchActionFor ::
      throw new TypeError(`Expected a dispatchAction(actx, actionName, actionArgs){â€¦} function`)
    return dispatchActionFor

  else if 'function' === typeof host0.__dispatch__ ::
    dispatchActionFor = host =>
      (actx, actionName, actionArgs) =>
        host.__dispatch__(actx, actionName, actionArgs)
  else ::
    dispatchActionFor = host =>
      stateActionDispatch(host, options)

  return dispatchActionFor

const _noop_asAction = @{} set() ::
