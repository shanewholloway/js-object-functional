const module = require('..')

const createCounter = module.asFunctionalProto @:
  counter: 0

  asAction: @{}
    init(counter=0) ::
      this.counter = counter
      return this

    increment(howHigh=1) ::
      this.counter += howHigh
      return this

    decrement(howLow=1) ::
      this.counter -= howLow
      return this

  mutateShouldFail() ::
    this.counter = 'fail'



main()
function main() ::
  const ts0 = Date.now()
  const {inspect} = require('util')
  function debug(ns) ::
    const td = Date.now() - ts0
    const repr = inspect @ ns, {colors: true, depth: null}
    console.log @ `debug [${td}] :: ${repr}\n`

  ::
    const host0 = createCounter()
    debug @: host0

    host0.subscribe @ viewUpdate => ::
      debug @: viewUpdate

    const view1 = host0
    debug @: view1

    const view2 = host0.increment(10)
    debug @: view2

    const view3 = host0.decrement(20)
    debug @: view3

    try ::
      view3.mutateShouldFail()
      console.error("SHOULD NEVER REACH HERE")
    catch err ::
      console.log(`Good expected exception: "${err.message}"`)

    console.log()
    debug @: host0, view1, view2, view3
    console.log()
