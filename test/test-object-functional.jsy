require('source-map-support').install()

global.Observable = require('zen-observable')

const tap = require('tap-lite-tester')

//const objectFunctional = require('object-functional')
const module = require('../dist')
const immu_module = require('../dist/immu')

tap.start()


tap.test @ 'Smoke test', t => ::
  class TestObject extends module.ObjectFunctional ::

  const obj = new TestObject()



tap.test @ 'updateObservable test', t => ::
  const called = @{} start: 0, next: 0, value: false
  const expected = @{} start: 1, next: 5, value: 'final'

  t.strictEqual(called.value, false)

  const initial = Symbol('test initial update')
  const updateFn = module.updateObservable({initial})
  t.strictEqual(called.value, false)

  updateFn.observable.subscribe @:
      start(subscribe) ::
        called.start+=1
    , next(value) ::
        called.next+=1
        called.value = value
    , error(err) ::
        t.fail @ err, null, 'Should not call error'
    , complete(value) ::
        t.fail @ 'Should not call complete'

  t.strictEqual(called.value, initial)
  updateFn('one')
  t.strictEqual(called.value, 'one')
  updateFn('two')
  t.strictEqual(called.value, 'two')
  updateFn('three')
  t.strictEqual(called.value, 'three')

  updateFn('final')
  t.deepEqual(called, expected)



tap.test @ 'Action test', t => ::
  let obj, view1, view2

  class TestObject extends module.ObjectFunctional ::
    asAction = this.someTestAction

    someTestAction(testKey, testValue) ::
      t.notStrictEqual(this, obj)
      t.notStrictEqual(this, view1)
      t.notStrictEqual(this, view2)

      this[testKey] = testValue

    plainMethod(testKey, testValue) ::
      t.throws @
        () => ::
          this[testKey] = {testKey, testValue}
        , 'Should not be able to mutate from outside an action method'

  obj = new TestObject()
  t.strictEqual(obj.key, undefined)

  obj.plainMethod('failKey', 'some-fail-value')

  view1 = obj.someTestAction('key', 'some-value')
  t.strictEqual(obj.key, undefined)
  t.strictEqual(view1.key, 'some-value')

  view1.plainMethod('failKey', 'some-fail-value')

  view2 = obj.someTestAction('key', 'some-other-value')
  t.strictEqual(obj.key, undefined)
  t.strictEqual(view1.key, 'some-value')
  t.strictEqual(view2.key, 'some-other-value')

  view2.plainMethod('failKey', 'some-fail-value')

  t.throws @
    () => :: obj.someAttr = 2142
    , 'Should not be able to mutate host attribute'

  t.throws @
    () => :: view2.someAttr = 1942
    , 'Should not be able to mutate view attribute'



tap.test @ 'Subscribe test', t => ::
  let obj, view1, view2

  class TestObject extends module.ObjectFunctional ::
    asAction = this.someTestAction

    someTestAction(testKey, testValue) ::
      t.notStrictEqual(this, obj)
      t.notStrictEqual(this, view1)
      t.notStrictEqual(this, view2)

      this[testKey] = testValue

  obj = new TestObject()

  const _update_log_ =  []
  obj.subscribe @:
      next(view) ::
        _update_log_.push @ view ? view.key : null
    , error(err) ::
        t.fail @ null, err, 'Unexpected error during notification'

  t.strictEqual(obj.key, undefined)
  t.deepEqual(_update_log_, [null])

  view1 = obj.someTestAction('key', 'some-value')
  t.strictEqual(obj.key, undefined)
  t.strictEqual(view1.key, 'some-value')
  t.deepEqual(_update_log_, [null, 'some-value'])

  view2 = obj.someTestAction('key', 'some-other-value')
  t.strictEqual(obj.key, undefined)
  t.strictEqual(view1.key, 'some-value')
  t.strictEqual(view2.key, 'some-other-value')
  t.deepEqual(_update_log_, [null, 'some-value', 'some-other-value'])



tap.test @ 'Immu wrapper test', t => ::
  let obj, view1, view2

  class TestObject extends immu_module.ImmuObjectFunctional ::
    asAction = this.someTestAction
    someTestAction(testKey, testValue) ::
      t.notStrictEqual(this, obj)
      t.notStrictEqual(this, view1)
      t.notStrictEqual(this, view2)

      this[testKey] = {testKey, testValue}

    plainMethod(testKey, testValue) ::
      t.throws @
        () => ::
          this[testKey] = {testKey, testValue}
        , 'Should not be able to mutate from outside an action method'

  obj = new TestObject()
  t.strictEqual(obj.key, undefined)

  obj.plainMethod('failKey', 'some-fail-value')

  view1 = obj.someTestAction('key', 'some-value')
  t.strictEqual(obj.key, undefined)
  t.deepEqual(view1.key, {testKey: 'key', testValue: 'some-value'})

  view1.plainMethod('failKey', 'some-fail-value')

  view2 = obj.someTestAction('key', 'some-other-value')
  t.strictEqual(obj.key, undefined)
  t.deepEqual(view1.key, {testKey: 'key', testValue: 'some-value'})
  t.deepEqual(view2.key, {testKey: 'key', testValue: 'some-other-value'})

  view2.plainMethod('failKey', 'some-fail-value')

  t.throws @
    () => :: obj.someAttr = 2142
    , 'Should not be able to mutate host attribute'

  t.throws @
    () => :: view2.someAttr = 1942
    , 'Should not be able to mutate view attribute'

  t.throws @
    () => :: view2.key.someNestedAttr = 1942
    , 'Should not be able to mutate nested attribute'



tap.finish()
