const testModule = require('..') // require('object-functional')

module.exports = exports = function(tap, options={}) ::

  tap.test @ 'Smoke test', t => ::
    const createTestObject = testModule.asFunctionalProto @:

    const obj = createTestObject()



  tap.test @ 'Action test', t => ::
    let obj, view1, view2

    const createTestObject = testModule.asFunctionalProto @:
      asActions: @{}
        someTestAction(testKey, testValue) ::
          t.notStrictEqual(this, obj)
          t.notStrictEqual(this, view1)
          t.notStrictEqual(this, view2)

          this[testKey] = testValue
          return this

      plainMethod(testKey, testValue) ::
        t.throws @
          () => ::
            this[testKey] = {testKey, testValue}
          'Should not be able to mutate from outside an action method'

    obj = createTestObject()
    t.strictEqual(obj.key, undefined)

    obj.plainMethod('failKey', 'some-fail-value')

    view1 = obj.someTestAction('key', 'some-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')

    view1.plainMethod('failKey', 'some-fail-value')

    view2 = obj.someTestAction('key', 'some-other-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(view2.key, 'some-other-value')

    view2.plainMethod('failKey', 'some-fail-value')

    t.throws @
      () => :: obj.someAttr = 2142
      'Should not be able to mutate host attribute'

    t.throws @
      () => :: view2.someAttr = 1942
      'Should not be able to mutate view attribute'


  tap.test @ 'Subscribe test', t => ::
    let obj, view1, view2

    const createTestObject = testModule.asFunctionalProto @:
      asAction: @{}
        someTestAction(testKey, testValue) ::
          t.notStrictEqual(this, obj)
          t.notStrictEqual(this, view1)
          t.notStrictEqual(this, view2)

          this[testKey] = testValue
          return this

    obj = createTestObject()

    const _update_log_ =  []
    obj.subscribe @ view => ::
      _update_log_.push @ view ? view.key : null

    t.strictEqual(obj.key, undefined)
    t.deepEqual(_update_log_, [null])

    view1 = obj.someTestAction('key', 'some-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.deepEqual(_update_log_, [null, 'some-value'])

    view2 = obj.someTestAction('key', 'some-other-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(view2.key, 'some-other-value')
    t.deepEqual(_update_log_, [null, 'some-value', 'some-other-value'])


  tap.test @ 'Subscribe test', t => ::
    let obj, view1, view2

    const createTestObject = testModule.asFunctionalProto @:
      getKey(testKey) :: return this[testKey]

      asAction: @{}
        someTestAction(testKey, testValue) ::
          t.notStrictEqual(this, obj)
          t.notStrictEqual(this, view1)
          t.notStrictEqual(this, view2)

          this[testKey] = testValue
          return this

    obj = createTestObject()

    let ro_view
    const _update_log_ =  []
    obj.readonly_view.subscribe @ view => ::
      _update_log_.push @ view ? view.key : null
      ro_view = view

    let rw_view
    obj.readwrite_view.subscribe @ view => ::
      rw_view = view

    t.strictEqual(obj.key, undefined)
    t.deepEqual(_update_log_, [null])

    view1 = obj.someTestAction('key', 'some-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(ro_view.key, 'some-value')
    t.strictEqual(ro_view.getKey('key'), 'some-value')
    t.deepEqual(_update_log_, [null, 'some-value'])

    view2 = view1.someTestAction('key', 'some-other-value')
    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(view2.key, 'some-other-value')
    t.strictEqual(ro_view.getKey('key'), 'some-other-value')
    t.deepEqual(_update_log_, [null, 'some-value', 'some-other-value'])

    t.throws @
      @=> ::
        ro_view.someTestAction('key', 'some-value')

      @ /View is read-only. Action method disallowed/

    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(view2.key, 'some-other-value')
    t.strictEqual(ro_view.getKey('key'), 'some-other-value')
    t.deepEqual(_update_log_, [null, 'some-value', 'some-other-value'])


    rw_view.someTestAction('key', 'some-rwkey-value')

    t.strictEqual(obj.key, undefined)
    t.strictEqual(view1.key, 'some-value')
    t.strictEqual(view2.key, 'some-other-value')
    t.strictEqual(ro_view.getKey('key'), 'some-rwkey-value')
    t.deepEqual(_update_log_, [null, 'some-value', 'some-other-value', 'some-rwkey-value'])

