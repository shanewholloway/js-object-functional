export function ObjectFunctional() ::
  return asFunctionalObject(this)

// ---

export default asFunctionalObject
export function asFunctionalObject(host, ...options) ::
  let tip_asAction = host.asAction
  const proto_host = host
  host = Object.create(proto_host)

  // initialize options
  options = Object.assign({}, ...options)
  const notify = null == options.notify
    ? bindUpdateFunction(host, options)
    : options.notify



  // setup asAction setter hack -- in lieu of ES standard decorators
  const {dispatchAction, defineAction} = bindActionDeclarations(notify)
  if options.actions :: defineAction(options.actions)

  const subscribe = @{} value(...args) :: return notify.subscribe(...args)
  const __impl_proto__ = Object.create @ proto_host, @{} subscribe
  const __view_proto__ = Object.create @ proto_host, @{} subscribe

  Object.defineProperties @ host, @{}
    subscribe, asAction: @{} set: defineAction
    __impl_proto__: @{} configurable: true, value: __impl_proto__
    __view_proto__: @{} configurable: true, value: __view_proto__


  // initialize the internal stat with initial view
  dispatchAction(notify, null, [], null)

  if null != tip_asAction ::
    host.asAction = tip_asAction
    tip_asAction = null

  // return a frozen clone of the host object
  return Object.freeze @ Object.create @ host


  function bindActionDeclarations(notify) ::
    let dispatchAction
    if null != options.dispatchAction ::
      dispatchAction = options.dispatchAction
      if 'function' !== typeof dispatchAction ::
        throw new TypeError(`Expected a dispatchAction(notify, actionName, actionArgs){â€¦} function`)
    else if 'function' === typeof host.__dispatch__ ::
      dispatchAction = function(notify, actionName, actionArgs) ::
        return host.__dispatch__(notify, actionName, actionArgs)
    else ::
      dispatchAction = stateActionDispatch(host, options)


    const defineAction = (actionList) => ::
      if 'function' === typeof actionList ::
        actionList = @[] @[] actionList.name, actionList
      else if 'string' === typeof actionList ::
        actionList = @[] @[] actionList, host[actionList]
      else if ! Array.isArray @ actionList ::
        actionList = Object.entries(actionList)
      else if 'string' === typeof actionList[0] ::
        actionList = @[] actionList


      const impl_props={}, view_props={}, host_props = {}
      for const [actionName, fnAction] of actionList ::
        if ! actionName ::
          throw new TypeError @ `Action name not found`
        if 'function' !== typeof fnAction ::
          throw new TypeError @ `Expected action "${actionName}" to be a function, but found "${typeof fnAction}"`

        const fnDispatch = function (...actionArgs) ::
          return dispatchAction(notify, actionName, actionArgs)

        impl_props[actionName] = @{} value: fnAction
        view_props[actionName] = @{} value: fnDispatch
        host_props[actionName] = @{} value: fnDispatch, configurable: true

      Object.defineProperties @ __impl_proto__, impl_props
      Object.defineProperties @ __view_proto__, view_props
      Object.defineProperties @ host, host_props

    return @{} dispatchAction, defineAction


// ---

export function bindUpdateFunction() ::
  let notifyList = []
  let current

  update.subscribe = subscribe
  return update

  function update(next) ::
    if current === next :: return

    current = next
    for const cb of notifyList ::
      try :: cb(current)
      catch err :: discard(cb)

  function subscribe(...args) ::
    const callback = args.pop()
    const skipInitialCall = args[0]

    if -1 !== notifyList.indexOf(callback) ::
      return
    if 'function' !== typeof callback ::
      throw new TypeError @ `Please subscribe with a function`

    notifyList = notifyList.concat @ [callback]
    if ! skipInitialCall ::
      callback(current)
    unsubscribe.unsubscribe = unsubscribe
    return unsubscribe

    function unsubscribe() ::
      discard(callback)

  function discard(callback) ::
    notifyList = notifyList
      .filter @ e => callback !== e

// ---


export function stateActionDispatch(host, options={}) ::
  if options.transform ::
    const xform = bindStateTransform(options.transform, 'transform', options.transformFilter)
    options.after = [].concat @ options.after || [], xform

  if options.viewTransform ::
    const xform = bindStateTransform(options.viewTransform, 'viewTransform', options.viewTransformFilter)
    options.changed = [].concat @ options.changed || [], xform

  const isChanged = options.isChanged || host.__is_changed__ || isObjectChanged
  const on_before = asDispatchCallbackPipeline @ options.before, host.__dispatch_before__, 'before'
  const on_error = asDispatchCallbackPipeline @ options.error, host.__dispatch_error__, 'error'
  const on_after = asDispatchCallbackPipeline @ options.after, host.__dispatch_after__, 'after'
  const on_changed = asDispatchCallbackPipeline @ options.changed, host.__dispatch_changed__, 'changed'
  const on_freeze = asDispatchCallbackPipeline @ options.freeze, host.__dispatch_freeze__, 'freeze'

  if undefined !== isChanged && 'function' !== typeof isChanged ::
    throw new TypeError @ `Dispatch expected 'isChanged' option to be a function instance`

  let state = {}, state_summary, tip_view
  return __dispatch__

  function __dispatch__(notify, actionName, actionArgs, view) ::
    const pre_state = state
    const tgt = Object.create @ host.__impl_proto__

    Object.assign @ tgt, state

    let result
    const ctx = @: action: [actionName, actionArgs, view]
      pre_state, isTipView: tip_view === view && view !== undefined

    try ::
      if undefined !== on_before ::
        on_before(tgt, ctx)

      try ::
        // dispatch action method
        if actionName ::
          result = tgt[actionName].apply(tgt, actionArgs)
          ctx.result = result
        else ::
          ctx.result = result = tip_view = tgt

        // transform from impl down to a view
        Object.setPrototypeOf(tgt, host.__view_proto__)

      catch err ::
        // transform from impl down to a view
        Object.setPrototypeOf(tgt, host.__view_proto__)

        // handle error from action method
        if undefined === on_error :: throw err

        const shouldThrow = on_error(err, tgt, ctx)
        if false !== shouldThrow :: throw err

      if undefined !== on_after ::
        on_after(tgt, ctx)

      // capture state after dispatching action
      const post_state = Object.assign @ {}, tgt
      ctx.post_state = post_state

      if pre_state !== state ::
        throw new Error @ `Async conflicting update of "${host.constructor.name}" occured`

      const change_summary = isChanged(pre_state, post_state, state_summary, ctx)
      if change_summary ::
        ctx.changed = true
        state = post_state
        state_summary = change_summary
        tip_view = tgt

        if undefined !== on_changed ::
          on_changed(tgt, ctx)

      else if tgt === result ::
        ctx.result = result = tip_view

    finally ::
      if undefined !== on_freeze ::
        try ::
          on_freeze(tgt, ctx)
        catch err ::
          Promise.reject(err)
      Object.freeze(tgt)

    notify(tip_view)
    return result

// ---

export function asDispatchCallbackPipeline(callback, host_callback, callback_name) ::
  if null != host_callback ::
    callback = [].concat @ host_callback, callback || []
  else if null == callback :: return

  if 'function' === typeof callback :: return callback

  if Array.isArray(callback) || callback[Symbol.iterator] ::
    const callbackList = Array.from(callback).filter(e => null != e)

    if callbackList.some @ cb => 'function' !== typeof cb ::
      throw new TypeError @ `Dispatch expected '${callback_name}' option to only include functions in list`

    if callbackList.length <= 1 ::
      callback = callbackList.pop()
    else ::
      callback = function (tgt, arg1, arg2) ::
        for const cb of callbackList ::
          try :: cb(tgt, arg1, arg2)
          catch err ::
            Promise.reject(err)

  if 'function' !== typeof callback ::
    throw new TypeError @ `Dispatch expected '${callback_name}' option to be a function instance or list of functions`
  return callback

// ---

export function isObjectChanged(prev, next) ::
  if prev === undefined ::
    return next !== undefined

  for const key of Object.keys(next) ::
    if ! @ key in prev ::
      return true // added

  for const key of Object.keys(prev) ::
    if prev[key] !== next[key] ::
      return true // changed
    if ! @ key in next ::
      return true // removed

  return false

// ---

export function bindStateTransform(xform, xform_name, xform_filter) ::
  if 'function' !== typeof xform ::
    throw new TypeError(`Expected ${xform_name}to be a function`)

  if true === xform_filter || 'not-frozen' ::
    xform_filter = attr => ! Object.isFrozen(attr)

  return function(tgt) ::
    for const key of Object.keys(tgt) ::
      const attr = tgt[key]
      if ! xform_filter || xform_filter(attr, key) ::
        tgt[key] = xform @ attr

